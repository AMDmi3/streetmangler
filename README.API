           streetmangler - реестр и конвертер названий улиц
          ==================================================

Библиотека состоит по большей части из 3 классов.

StreetMangler::Locale
=====================

  Определяет локаль - набор правил для определённого языка/региона.
  На данный момент в локали хранится список статусных частей и их
  возможных сокращений.

  Задание локали
  --------------

  Данные локали задаются в исходном файле в виде массива структур
  StatusPartData, определяющий полное написание статусной части,
  каноническое сокращение и опциональный набор всех возможных
  сокращений, по котором можно определить статусную часть:

    StatusPartData status_parts[] = {
        { "проспект", "пр-т.", { "просп", "пр-кт", "пр-т", NULL } },
        { NULL, NULL, { NULL } },
    }

  После этого через создание глобального объекта Locale::Registrar
  данные локали автоматически связываются с именем и становятся
  доступны для использования:

    Locale::Registrar("ru", status_parts),

  Следует заметить что каноническое сокращение НЕ ИСПОЛЬЗУЕТСЯ
  для поиска статусной части, поэтому скорее всего должно быть
  продублировано в списке сокращений (без точки). Кроме того,
  совпадающие ключи для поиска (например, "пр" и для проспекта
  и для проезда) запрещены.

  Использование
  -------------

    // Получить локаль
    Locale locale("ru"); // Кидает Locale::UnknownLocale если локаль
                         // с таким именем не найдена

    // Получить и использовать данные по статусной части
    const StatusPart* info = locale.FindStatus("пр-т");
    assert(info->GetFull() == "проспект");
    assert(info->GetAbbrev() == "пр-т.");


StreetMangler::Name
===================

  Хранит название улицы, разбитое на части и готовое к преобразованиям.

  В конструктор передаётся строка с названием и ссылка на локаль.

  Единственный метод - Join() принимает ряд флагов, позволяющих
  преобразовать имя в различными способами:

    STATUS_TO_LEFT      - перенести статусную часть влево
    STATUS_TO_RIGHT     - перенести статусную часть вправо
    REMOVE_ALL_STATUSES - удалить все части, похожие на статусные
    в отсутствие этих флагов статусная часть не меняет положения

    EXPAND_STATUS - заменить статусную часть полным написанием
    SHRINK_STATUS - заменить статусную часть каноническим сокращением
    в отсутствие этих флагов статусная часть не меняет написания

    NORMALIZE_WHITESPACE - заменить все последовательности пробельных
                           символов (' ', '\t') единичными пробелами,
                           убрать пробелы в начале и конце строки
    NORMALIZE_PUNCT      - удалить запятую в случае типа "Ленина,
                           улица". Этот флаг автоматически
			               подразумевается при STATUS_TO_LEFT,
                           STATUS_TO_RIGHT, REMOVE_ALL_STATUSES

  Использование
  -------------

    // Нужна локаль
    Locale locale("ru");

    Name name("улица Ленина", locale);

    // Получить имя в неизменённом виде
    assert(name.Join()) == "улица Ленина");

    // Сократить статус
    assert(name.Join(Name::SHRINK_STATUS)) == "ул. Ленина");

    // Перенести статус вправо
    assert(name.Join(Name::STATUS_TO_RIGHT)) == "Ленина улица");


StreetMangler::Database
=======================

  База данных правильных названий улиц. Загружается из файла
  и предоставляет методы для сопоставления названий:

  CheckExactMatch    - проверка на точное соответствие
  CheckCanonicalForm - проверка неточного написания, учитывающая
                       перестановку слов, регистр, пробелы и
                       сокращения статусных частей
  CheckSpelling      - проверка неточного написания с учётом
                       орфографических ошибок (пока не реализовано)
  CheckStrippedStatus - проверка на название с отсутствующей статусной
                        частью

  Все функции возвращают число соответствий, а все кроме первой
  также наполняют вектор предположительных правильных написаний.
  В случае CheckCanonicalForm и CheckSpelling оный может использоваться,
  например, для формирования списка замен.

  Для удобства, все функции работают как с обычными строками, так
  и со StreetMangler::Name. Использование второй формы может быть
  эффективнее при последовательных вызовах, поскольку не нужно будет
  многократно конструировать Name.

  Использование
  -------------

    // Нужна локаль
    Locale locale("ru");

    Database database(locale);

    // Можно загружать несколько баз
    database.Load("data/ru.txt");

    // Можно добавлять названия вручную
    database.Add("улица Ленина");

    int res = database.CheckExactMatch("улица Ленина");
    assert(res == 1); // Правильное написание

    std::vector<std::string> suggestions;
    int res = database.CheckCanonicalForm("Ленина ул.");
    assert(res == 1); // Найдена одна замена
    assert(suggestions[0] == "улица Ленина");
